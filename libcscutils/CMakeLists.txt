PROJECT(libcscutils) 
CMAKE_MINIMUM_REQUIRED(VERSION 2.8) 


#Options
OPTION(DEBUG "Debug Mode" OFF) 
OPTION(BUILD_SHARED_LIBS OFF) 
OPTION(DOCS 	"Build API documentation" ON) 


SET(INPROJECT FALSE) 
IF ( NOT ${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR}) 
	MESSAGE(STATUS "libcscutils in project build") 
	SET(BUILD_SHARED_LIBS OFF) 
	SET(DOCS OFF) 
	SET(INPROJECT TRUE)
ELSE () 
	list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")

ENDIF()

IF( NOT CMAKE_BUILD_TYPE )
   SET( CMAKE_BUILD_TYPE "Release" )
ENDIF( NOT CMAKE_BUILD_TYPE )

IF (DEBUG STREQUAL ON) 
	SET( CMAKE_BUILD_TYPE "Debug" )
ENDIF (DEBUG STREQUAL ON )

#Options for the IO 
OPTION(CSC_IO_ZLIB  "Build ZLIB IO Support" ON) 
OPTION(CSC_IO_BZIP2 "Build BZIP2 IO Support" ON) 
OPTION(CSC_IO_LIBLZMA "Build LZMA IO Support" ON) 
OPTION(CSC_IO_MMAP "Build with MMAP Support" OFF)

# Required Addons
INCLUDE (CheckIncludeFiles)
INCLUDE (CCompilerSettings)
INCLUDE (CXXCompilerSettings)

# Compile Options 
SET(LIBS ${LIBRARIES} "m")
SET(INCLUDE_DIR ${INCLUDE_DIR})

# Include Helpers 
INCLUDE (CheckTypeSize)
INCLUDE (CheckFunctionExists)
INCLUDE (CheckIncludeFiles)
INCLUDE (CheckAttributeExists)
INCLUDE (CheckFeatureNeeded) 
INCLUDE (ExternalProject)
INCLUDE (CheckSymbolExists) 
INCLUDE (CheckCCompilerFlag)
INCLUDE (CheckBlasZdotcMKL)

#
# DECOMPOSE_FEATURES
#
IF (NOT CSCUTILS_FEATURES)
	SET(CSCUTILS_FEATURES "inifile;io;threading;hdf5;image;hardware;ds")
ENDIF()

FOREACH(FEAT ${CSCUTILS_FEATURES}) 
	MESSAGE(STATUS "Enable module: ${FEAT}" )
	STRING(TOUPPER ${FEAT} _FEAT) 
	SET(${_FEAT}_ENABLE TRUE) 
ENDFOREACH()

#
#  Check for compiler features 
#
Check_Attribute_Exists( constructor HAVE_ATTR_CONSTRUCTOR) 
IF (HAVE_ATTR_CONSTRUCTOR) 
	ADD_DEFINITIONS(-DHAVE_ATTR_CONSTRUTOR)
ENDIF()


#
# Check for Libraries 
#
MACRO(CHECK_LIB PREFIX PACKAGE_NAME NO_DEFINE)
	STRING(TOUPPER ${PACKAGE_NAME} _PACKAGE_NAME)
	IF (NOT ${PREFIX}_${_PACKAGE_NAME} STREQUAL OFF)
		FIND_PACKAGE(${PACKAGE_NAME} )
		IF (${_PACKAGE_NAME}_FOUND)
			SET (INCLUDE_DIR ${INCLUDE_DIR} ${${_PACKAGE_NAME}_INCLUDE_DIR}) 
			SET (LIBS ${${_PACKAGE_NAME}_LIBRARIES} ${LIBS} )
			MESSAGE(STATUS "${PACKAGE_NAME} found (LIB = ${${_PACKAGE_NAME}_LIBRARIES}, INCLUDE = ${${_PACKAGE_NAME}_INCLUDE_DIR})") 
		ELSE ()
			MESSAGE (STATUS "${PACKAGE_NAME} not found. Deactivating.")
			ADD_DEFINITIONS(-D${NO_DEFINE})
		ENDIF ()
	ELSE ()
		ADD_DEFINITIONS(-D${NO_DEFINE})
	ENDIF()
	UNSET(${_PACKAGE_NAME})
ENDMACRO(CHECK_LIB)

MACRO(CHECK_FUNC FUNC)
	STRING(TOUPPER ${FUNC} _FUNC)
	Check_Function_Exists(${FUNC} HAVE_${_FUNC})
	IF ( HAVE_${_FUNC} ) 
		ADD_DEFINITIONS(-DHAVE_${_FUNC})
	ENDIF ()
	UNSET(_FUNC) 
ENDMACRO(CHECK_FUNC)

# Generic Stuff
FIND_PACKAGE(Threads REQUIRED) 
SET(LIBS ${LIBS} ${CMAKE_THREAD_LIBS_INIT})
SET (_X ${CMAKE_REQUIRED_LIBRARIES}) 
SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_REQUIRED_LIBRARIES}) 
IF(CMAKE_USE_PTHREADS_INIT) 
	ADD_DEFINITIONS(-DHAVE_PTHREAD) 
	CHECK_FEATURE_NEEDED(pthread_yield pthread.h HAVE_PTHREAD_YIELD PTHREAD_YIELD_FEATURE)
	IF (HAVE_PTHREAD_YIELD) 
		ADD_DEFINITIONS("${PTHREAD_YIELD_FEATURE}") 
	ENDIF()
ENDIF()
SET(CMAKE_REQUIRED_LIBRARIES ${_X}) 
# FIND_PACKAGE(OpenMP) 
# IF ( OPENMP_FOUND ) 
#         SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
#         SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
# ENDIF()

#
# Common FEATURES 
#
CHECK_INCLUDE_FILES(execinfo.h HAVE_EXECINFO)
Check_Function_Exists(backtrace HAVE_BACKTRACE)
Check_Function_Exists(backtrace_symbols HAVE_BACKTRACE_SYMBOLS)
IF ( HAVE_EXECINFO AND HAVE_BACKTRACE AND HAVE_BACKTRACE_SYMBOLS) 
	MESSAGE(STATUS "Enable csc_show_backtrace.")
	ADD_DEFINITIONS(-DHAVE_BACKTRACE)
ELSE()
	MESSAGE(STATUS "csc_show_backtrace not enabled.")
ENDIF()

CHECK_FEATURE_NEEDED(strnlen string.h HAVE_STRNLEN STRNLEN_FEATURE "_WITH_STRNLEN")
IF( HAVE_STRNLEN ) 
	ADD_DEFINITIONS("${STRNLEN_FEATURE}") 
ELSE()
	MESSAGE(FATAL_ERROR "Did not find strnlen")
ENDIF()

CHECK_FEATURE_NEEDED(strndup string.h HAVE_STRNDUP STRNDUP_FEATURE "_WITH_STRNDUP")
IF( HAVE_STRNLEN ) 
	ADD_DEFINITIONS("${STRNDUP_FEATURE}") 
ELSE()
	MESSAGE(FATAL_ERROR "Did not find strndup")
ENDIF()


IF (INIFILE_ENABLE) 
	CHECK_FEATURE_NEEDED(getline stdio.h HAVE_GETLINE GETLINE_FEATURE "_WITH_GETLINE")
	IF( HAVE_GETLINE ) 
		ADD_DEFINITIONS("${GETLINE_FEATURE}")
	ELSE ()
		MESSAGE(FATAL_ERROR "getline not found")
	ENDIF()
	CHECK_FEATURE_NEEDED(realpath stdlib.h HAVE_REALPATH REALPATH_FEATURE) 
	IF ( HAVE_REALPATH) 
		ADD_DEFINITIONS("${REALPATH_FEATURE}")
	ELSE()
		MESSAGE(FATAL_ERROR "realpath not found")
	ENDIF()

ENDIF()

IF (IO_ENABLE) 
	# IO_ZLIB 
	CHECK_LIB(CSC_IO ZLIB NO_GZ)
	CHECK_LIB(CSC_IO BZip2 NO_BZ2)
	CHECK_LIB(CSC_IO LibLZMA NO_XZ) 
	CHECK_FUNC(vsscanf)
	CHECK_FUNC(vsnprintf)

	Check_Include_Files(sys/types.h _SYS_TYPES)
	IF ( _SYS_TYPES )
		SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} sys/types.h)
	ENDIF ( _SYS_TYPES)
	Check_Include_Files(sys/stat.h  _SYS_STAT)
	IF ( _SYS_STAT )
		SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} sys/stat.h)
	ENDIF ( _SYS_STAT)
	Check_Include_Files(fcntl.h     _FCNTL)
	IF ( _FCNTL )
		SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} fcntl.h)
	ENDIF ( _FCNTL)
	Check_Include_Files(sys/mman.h     _SYS_MMAN)
	IF ( _SYS_MMAN )
		SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} sys/mman.h)
	ENDIF ( _SYS_MMAN)
	Check_Include_Files(unistd.h     _UNISTD)
	IF ( _UNISTD )
		SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} unistd.h)
	ENDIF ( _UNISTD)

	Check_Function_Exists(open _HAVE_OPEN)
	Check_Function_Exists(mmap _HAVE_MMAP)
	Check_Function_Exists(lseek _HAVE_LSEEK)
    SET (CSC_IO_MMAP_IO FALSE)
    IF ( CSC_IO_MMAP AND _HAVE_LSEEK AND _HAVE_MMAP AND _HAVE_OPEN ) #CSC_IO_MMAP is an option which can be turned off
		SET ( CSC_IO_MMAP_IO TRUE) 
		MESSAGE(STATUS "Enable MMAP-IO") 
		ADD_DEFINITIONS(-DCSC_IO_MMAP_IO) 
    ELSE (CSC_IO_MMAP AND _HAVE_LSEEK AND _HAVE_MMAP AND _HAVE_OPEN ) 
        SET ( CSC_IO_MMAP_IO FALSE) 
    ENDIF (CSC_IO_MMAP AND  _HAVE_LSEEK AND _HAVE_MMAP AND _HAVE_OPEN ) 

ENDIF()

IF (HDF5_ENABLE) 
	FIND_PACKAGE(HDF5 COMPONENTS C HL REQUIRED)
	SET(LIBS ${LIBS} ${HDF5_LIBRARIES} ${HDF5_HL_LIBRARIES}) 
	SET(INCLUDE_DIR ${INCLUDE_DIR} ${HDF5_INCLUDE_DIRS})
	ADD_DEFINITIONS(${HDF5_DEFINITIONS})
ENDIF()

# Find additional Libraries 
add_subdirectory(src)
IF (NOT INPROJECT) 
 add_subdirectory(examples)
ENDIF()

IF ( DOCS STREQUAL ON ) 
	set(DOXYFILE_OUTPUT_DIR "${CMAKE_BINARY_DIR}/doc")
	set(DOXYFILE_LATEX_DIR  "${CMAKE_BINARY_DIR}/doc/latex")
	set(LATEX_COMPILER "pdflatex")
	# set(DOXYFILE_EXTRA_SOURCES "${CMAKE_SOURCE_DIR}/documents/category.dox") 
	set(DOXYFILE_LATEX OFF)
	set(DOXYFILE_GENERATE_LATEX YES) 
	set(USE_PDFLATEX YES)



	#set(PROJECT_VERSION ${MESS_VERSION}) 

	include(UseDoxygen OPTIONAL) 
	#	IF ( DOXYGEN_FOUND ) 
	#	file(MAKE_DIRECTORY ${CMAKE_BINARY_DIR}/doc/html/misc)
	#	file(COPY ${CMAKE_SOURCE_DIR}/documents/doc_style.css DESTINATION  ${CMAKE_BINARY_DIR}/doc/html/misc/)
	#ENDIF (DOXYGEN_FOUND) 
ENDIF ( DOCS STREQUAL ON) 

